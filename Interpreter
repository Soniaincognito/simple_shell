#include "shell.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

/**
 * print_prompt - Displays the shell prompt.
 */
void print_prompt(void)
{
    printf("$ ");
}

/**
 * print_error - Prints an error message.
 * @msg: The error message to be printed.
 */
void print_error(const char *msg)
{
    perror(msg);
}

/**
 * signal_handler - Handles signals, specifically SIGINT.
 * @signum: The signal number.
 */
void signal_handler(int signum)
{
    if (signum == SIGINT)
    {
        print_prompt();
    }
}

/**
 * execute_command - Executes a shell command.
 * @command: The command to be executed.
 */
void execute_command(const char *command)
{
    pid_t pid;
    int status;

    /* Fork a child process */
    pid = fork();
    if (pid == -1)
    {
        print_error("Fork");
        return;
    }

    /* If this is the child process, execute the command */
    if (pid == 0)
    {
        char *argv[] = {"/bin/sh", "-c", (char *)command, NULL};
        if (execv("/bin/sh", argv) == -1)
        {
            print_error("Exec");
        }
        exit(EXIT_FAILURE);
    }

    /* If this is the parent process, wait for the child to finish */
    if (waitpid(pid, &status, 0) == -1)
    {
        print_error("Waitpid");
    }
}

/**
 * main - The main function.
 *
 * Return: EXIT_SUCCESS on success, or EXIT_FAILURE on failure.
 */
int main(void)
{
    char command[1024];
    signal(SIGINT, signal_handler);

    while (1)
    {
        print_prompt();
        if (fgets(command, sizeof(command), stdin) == NULL)
        {
            if (feof(stdin))
            {
                printf("\n");
                break;
            }
            else
            {
                print_error("Read");
                break;
            }
        }
        execute_command(command);
    }

    return EXIT_SUCCESS;
}

