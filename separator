#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX_INPUT_SIZE 1024
#define MAX_ARGS 64

/**
 * execute_command - Execute a single command
 * @command: The command to be executed
 *
 * Return: 0 on success, -1 on failure
 */
int execute_command(char *command) {
    char *args[MAX_ARGS];
    char *token;
    int status;
    pid_t pid;

    // Tokenize the command into arguments
    token = strtok(command, " \t\n");
    if (token == NULL) {
        return 0;  // Empty command
    }

    args[0] = token;
    int i = 1;
    while ((token = strtok(NULL, " \t\n")) != NULL && i < MAX_ARGS - 1) {
        args[i] = token;
        i++;
    }
    args[i] = NULL;

    // Fork a child process to execute the command
    pid = fork();
    if (pid == -1) {
        perror("fork");
        return -1;
    } else if (pid == 0) {
        // Child process
        if (execvp(args[0], args) == -1) {
            perror("execvp");
            exit(EXIT_FAILURE);
        }
    } else {
        // Parent process
        waitpid(pid, &status, 0);
        if (WIFEXITED(status)) {
            return WEXITSTATUS(status);
        } else {
            fprintf(stderr, "Child process terminated abnormally\n");
            return -1;
        }
    }

    return 0;
}

/**
 * execute_commands - Execute multiple commands separated by ';'
 * @input: The input string containing commands separated by ';'
 *
 * Return: 0 on success, -1 on failure
 */
int execute_commands(char *input) {
    char *command;
    char *token;
    char *saveptr;

    // Tokenize the input into commands separated by ';'
    token = strtok_r(input, ";", &saveptr);
    while (token != NULL) {
        // Execute each command
        command = token;
        if (execute_command(command) == -1) {
            return -1;
        }

        token = strtok_r(NULL, ";", &saveptr);
    }

    return 0;
}

int main(void) {
    char input[MAX_INPUT_SIZE];

    while (1) {
        // Print prompt
        printf("alex@~$ ");

        // Read input
        if (fgets(input, MAX_INPUT_SIZE, stdin) == NULL) {
            perror("fgets");
            continue;
        }

        // Execute commands separated by ';'
        if (execute_commands(input) == -1) {
            fprintf(stderr, "Error executing commands\n");
        }
    }

    return 0;
}

