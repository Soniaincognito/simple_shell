#include <stdio.h>
#include <stdlib.h>
#include <string.h>

extern char **environ;  // External environment variables

/**
 * setenv - Initialize a new environment variable or modify an existing one
 * @var: Name of the environment variable
 * @value: Value to be assigned to the environment variable
 *
 * Return: 0 on success, -1 on failure
 */
int setenv_custom(const char *var, const char *value) {
    if (var == NULL || value == NULL) {
        fprintf(stderr, "setenv: Invalid arguments\n");
        return -1;
    }

    // Check if the variable already exists
    if (getenv(var) != NULL) {
        if (setenv(var, value, 1) != 0) {
            perror("setenv");
            return -1;
        }
    } else {
        // Variable doesn't exist, create it
        char *new_var = malloc(strlen(var) + strlen(value) + 2);
        if (new_var == NULL) {
            perror("setenv");
            return -1;
        }

        sprintf(new_var, "%s=%s", var, value);

        if (putenv(new_var) != 0) {
            perror("setenv");
            free(new_var);
            return -1;
        }
    }

    return 0;
}

/**
 * unsetenv_custom - Remove an environment variable
 * @var: Name of the environment variable
 *
 * Return: 0 on success, -1 on failure
 */
int unsetenv_custom(const char *var) {
    if (var == NULL) {
        fprintf(stderr, "unsetenv: Invalid argument\n");
        return -1;
    }

    if (unsetenv(var) != 0) {
        perror("unsetenv");
        return -1;
    }

    return 0;
}

int main(int argc, char **argv) {
    if (argc < 3) {
        fprintf(stderr, "Usage: %s <command> <variable> [value]\n", argv[0]);
        return EXIT_FAILURE;
    }

    if (strcmp(argv[1], "setenv") == 0) {
        if (argc != 4) {
            fprintf(stderr, "Usage: %s setenv <variable> <value>\n", argv[0]);
            return EXIT_FAILURE;
        }

        if (setenv_custom(argv[2], argv[3]) != 0) {
            return EXIT_FAILURE;
        }
    } else if (strcmp(argv[1], "unsetenv") == 0) {
        if (argc != 3) {
            fprintf(stderr, "Usage: %s unsetenv <variable>\n", argv[0]);
            return EXIT_FAILURE;
        }

        if (unsetenv_custom(argv[2]) != 0) {
            return EXIT_FAILURE;
        }
    } else {
        fprintf(stderr, "Unknown command: %s\n", argv[1]);
        return EXIT_FAILURE;
    }

    // Print current environment variables
    char **env = environ;
    while (*env != NULL) {
        printf("%s\n", *env);
        env++;
    }

    return EXIT_SUCCESS;
}

