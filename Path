#include "shell.h"

/**
 * main - Simple shell program entry point.
 *
 * Return: Always 0 on success.
 */
int main(void)
{
    char *line;
    char **args;

    while (1)
    {
        /* Display prompt and read command line */
        display_prompt();
        line = read_command();

        /* Tokenize the command line into arguments */
        args = tokenize_line(line);

        /* Execute the command with arguments */
        execute_command(args);

        /* Free allocated memory */
        free(line);
        free(args);
    }

    return 0;
}

/**
 * display_prompt - Display the shell prompt.
 */
void display_prompt(void)
{
    _puts(":) ");
}

/**
 * read_command - Read a command line from standard input.
 *
 * Return: The entered command line.
 */
char *read_command(void)
{
    char *line = NULL;
    size_t len = 0;

    if (getline(&line, &len, stdin) == -1)
    {
        perror("getline");
        exit(EXIT_FAILURE);
    }

    /* Remove newline character at the end */
    if (line[len - 1] == '\n')
        line[len - 1] = '\0';

    return line;
}

/**
 * tokenize_line - Tokenize a command line into arguments.
 * @line: The command line to tokenize.
 *
 * Return: An array of arguments.
 */
char **tokenize_line(char *line)
{
    char *token;
    char **args = malloc(MAX_ARGS * sizeof(char *));
    size_t i = 0;

    if (!args)
    {
        perror("malloc");
        exit(EXIT_FAILURE);
    }

    token = strtok(line, " ");
    while (token)
    {
        args[i++] = strdup(token);
        token = strtok(NULL, " ");
    }
    args[i] = NULL;

    return args;
}

/**
 * execute_command - Execute a command with arguments.
 * @args: Array of command and arguments.
 */
void execute_command(char **args)
{
    pid_t pid;
    int status;

    pid = fork();
    if (pid == -1)
    {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0)
    {
        /* Child process */
        if (execvp(args[0], args) == -1)
        {
            perror("execvp");
            exit(EXIT_FAILURE);
        }
    }
    else
    {
        /* Parent process */
        waitpid(pid, &status, 0);
    }
}

/**
 * _puts - Print a string to standard output.
 * @str: The string to print.
 */
void _puts(const char *str)
{
    while (*str)
    {
        putchar(*str++);
    }
    putchar('\n');
}

